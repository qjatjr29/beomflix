{"version":3,"sources":["assets/noPosterSmall.PNG","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","API.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Components/Header.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["Container","styled","div","Title","span","Grid","Section","title","children","prototype","PropTypes","string","isRequired","oneOfType","arrayOf","node","role","aria-label","Text","props","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","star","isMovie","to","require","default","length","substring","HomePresenter","nowPlaying","upComing","popular","loading","error","Helmet","Loader","map","movie","original_title","poster_path","vote_average","release_date","api","axios","create","baseURL","params","MovieApi","get","append_to_response","term","query","encodeURIComponent","tvApi","HomeContainer","state","a","data","results","this","setState","console","log","React","Component","TVPresenter","topRated","airingToday","show","original_name","first_air_date","TVContainer","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","name","SearchContainer","event","preventDefault","searchByTerm","target","Header","header","List","ul","Item","li","current","SLink","Link","withRouter","pathname","location","Content","Cover","bgImage","Backdrop","Data","h3","ItemContainer","Divider","Overview","p","DetailPresenter","result","backdrop_path","runtime","episode_run_time","genres","genre","index","overview","DetailContainer","includes","match","push","history","parsedId","parseInt","isNaN","path","exact","component","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","Router","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31862388.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noPosterSmall.91e0038f.PNG\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    :not(:last-child){\r\n        margin-bottom:50px;\r\n    }\r\n    \r\n`;\r\nconst Title = styled.span`\r\n    font-size:16px;\r\n    font-weight:600;\r\n`;\r\nconst Grid = styled.div`\r\n    margin-top:25px;\r\n    display:grid;\r\n    grid-template-columns:repeat(auto-fill,125px);\r\n    grid-gap:25px;\r\n`;\r\n\r\n\r\nconst Section = ({ title, children }) => (\r\n    <Container>\r\n        <Title>{title}</Title>\r\n        <Grid>{children}</Grid>\r\n\r\n    </Container>\r\n);\r\n\r\nSection.prototype = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ])\r\n}\r\n\r\nexport default Section;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    height:100vh;\r\n    width:100vw;\r\n    display:flex;\r\n    justify-content:center;\r\n    font-size:28px;\r\n    margin-top:20px;\r\n`;\r\n\r\nexport default () =>\r\n    <Container>\r\n        <span role=\"img\" aria-label=\"Loading\">⏰</span>\r\n    </Container>\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    width:100vw;\r\n    display:flex;\r\n    justify-content:center;\r\n`;\r\nconst Text = styled.span`\r\n    color:${props => props.color};\r\n    /* font-weight:600; */\r\n`;\r\n\r\n\r\n\r\nconst Message = ({ text, color }) => <Container>\r\n    <Text color={color}>{text}</Text>\r\n</Container>\r\n\r\nMessage.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nconst Container = styled.div`\r\n    font-size:12px;\r\n`;\r\n\r\n\r\nconst Image = styled.div`\r\n    background-image:url(${props => props.bgUrl});\r\n    height: 180px;\r\n    background-size: cover;\r\n    border-radius: 4px;\r\n    background-position: center center;\r\n    margin-bottom: 5px;\r\n    transition: opacity 0.1s linear;\r\n`;\r\n\r\nconst Rating = styled.span`\r\nbottom: 3px;\r\nright: 5px;\r\nposition: absolute;\r\nopacity: 0;\r\n`;\r\nconst ImageContainer = styled.div`\r\n    margin-bottom: 5px;\r\n    position: relative;\r\n        &:hover{\r\n        ${Image} {\r\n            opacity: 0.3;\r\n        }\r\n        ${Rating} {\r\n            opacity: 0.3;\r\n        }\r\n    }\r\n`;\r\nconst Title = styled.span`\r\n    display: block;\r\n    margin-bottom: 3px;\r\n`;\r\n\r\nconst Year = styled.span`\r\n    font-size: 10px;\r\n    color: rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\nconst Poster = ({ id, imageUrl, title, rating, year, star, isMovie = false }) => (\r\n    <Link to={isMovie ? `/movie/${id}` : `/show/${id} `}>\r\n        <Container>\r\n            <ImageContainer>\r\n                <Image bgUrl={imageUrl ? `https://image.tmdb.org/t/p/w300${imageUrl}` : require(\"../assets/noPosterSmall.PNG\").default} />\r\n\r\n                <Rating><span role=\"img\" aria-label=\"rating\">⭐️</span>{\" \"}{rating}/10</Rating>\r\n\r\n            </ImageContainer >\r\n            <Title>{title.length > 15 ? `${title.substring(0, 15)}...` : title}</Title>\r\n            <Year>{year}</Year>\r\n        </Container >\r\n    </Link >\r\n);\r\n\r\n\r\n\r\nPoster.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    imageUrl: PropTypes.string,\r\n    title: PropTypes.string.isRequired,\r\n    rating: PropTypes.number,\r\n    year: PropTypes.string,\r\n    isMovie: PropTypes.bool\r\n}\r\n\r\nexport default Poster;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n    padding:20px;\r\n    \r\n`;\r\n\r\n// 로딩이 true인 상태이면 nowplaying, upcoming, popular 는 없으므로 \r\n// 로딩상태인지 체크를 해줘야한다 !!\r\n// 로딩이면  null\r\n// 로딩이 아닌 상태이면 nowPlaying이 존재하는지 , section이 우리가 원하는대로 render 되는지 확인 \r\nconst HomePresenter = ({ nowPlaying, upComing, popular, loading, error }) => (\r\n    <>\r\n        <Helmet>\r\n            <title>Movies | Beomflix</title>\r\n        </Helmet>\r\n        {loading ? (<Loader />) :\r\n            (<Container>\r\n                {/* <Helmet>\r\n                    <title>Movies | Beomflix</title>\r\n                </Helmet> */}\r\n                {nowPlaying && nowPlaying.length > 0 && (\r\n                    <Section title=\"Now Playing\" >\r\n                        {nowPlaying.map(movie => (\r\n                            <Poster\r\n                                key={movie.id}\r\n                                id={movie.id}\r\n                                title={movie.original_title}\r\n                                imageUrl={movie.poster_path}\r\n                                rating={movie.vote_average}\r\n                                year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                                isMovie={true}\r\n\r\n                            />))}\r\n                    </Section>\r\n                )}\r\n                {upComing && upComing.length > 0 && (\r\n                    <Section title=\"Upcoming Moives\" >\r\n                        {upComing.map(movie => (\r\n                            <Poster\r\n                                key={movie.id}\r\n                                id={movie.id}\r\n                                title={movie.original_title}\r\n                                imageUrl={movie.poster_path}\r\n                                rating={movie.vote_average}\r\n                                year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                                isMovie={true}\r\n\r\n                            />))}\r\n                    </Section>\r\n                )}\r\n                {popular && popular.length > 0 && (\r\n                    <Section title=\"Popular Moives\" >\r\n                        {popular.map(movie => (\r\n                            <Poster\r\n                                key={movie.id}\r\n                                id={movie.id}\r\n                                title={movie.original_title}\r\n                                imageUrl={movie.poster_path}\r\n                                rating={movie.vote_average}\r\n                                year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                                isMovie={true}\r\n\r\n                            />))}\r\n                    </Section>\r\n                )}\r\n\r\n                {error && <Message color=\"#e74c3c\" text={error} />}\r\n            </Container>)};\r\n    </>\r\n);\r\n\r\n\r\nHomePresenter.propTypes = {\r\n    nowPlaying: PropTypes.array,\r\n    upComing: PropTypes.array,\r\n    popular: PropTypes.array,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\n\r\nexport default HomePresenter;","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n    params: {\r\n        \"api_key\": \"b71e7ddc0337840f4f46be79b18e4c41\",\r\n        \"language\": \"en-US\"\r\n    }\r\n\r\n})\r\n\r\n\r\n\r\nexport const MovieApi = {\r\n    nowPlaying: () => api.get(\"movie/now_playing\"),\r\n    upComing: () => api.get(\"movie/upcoming\"),\r\n    popular: () => api.get(\"movie/popular\"),\r\n    movieDetail: (id) => api.get(`movie/${id}`, {\r\n\r\n        params: {\r\n            append_to_response: \"videos\"\r\n        }\r\n    }),\r\n    search: (term) => api.get(\"search/movie\"\r\n        , {\r\n            params: {\r\n                query: encodeURIComponent(term)\r\n            }\r\n        }\r\n    )\r\n\r\n}\r\n\r\nexport const tvApi = {\r\n    topRated: () => api.get(\"tv/top_rated\"),\r\n    popular: () => api.get(\"tv/popular\"),\r\n    airingToday: () => api.get(\"tv/airing_today\"),\r\n    showDetail: (id) => api.get(`tv/${id}`, {\r\n        params: {\r\n            append_to_response: \"videos\"\r\n        }\r\n    }),\r\n    search: (term) => api.get(\"search/tv\"\r\n        , {\r\n            params: {\r\n                query: encodeURIComponent(term)\r\n            }\r\n        }\r\n    )\r\n}","import HomeContainer from \"./HomeContainer\";\r\n\r\n\r\nexport default HomeContainer;\r\n","import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { MovieApi } from \"API\";\r\n\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        nowPlaying: null,\r\n        upComing: null,\r\n        popular: null,\r\n        error: null,\r\n        loading: true // 에러날 것 대비\r\n    };\r\n    async componentDidMount() {\r\n        try {\r\n            // API 의 NOWPLAYING 함수로 지금 상영중인 영화 정보를 가져온다\r\n            // 정보들 중에 DATA의 RESULT 값만 가져오기 위해서 객체 비구조화 를 이용\r\n            // result 변수의 이름을 nowPlaying,upComing, popular으로 바꿔주는 방법 (ES6 매직)\r\n            const { data: { results: nowPlaying } } = await MovieApi.nowPlaying();\r\n            const { data: { results: upComing } } = await MovieApi.upComing();\r\n            const { data: { results: popular } } = await MovieApi.popular();\r\n\r\n            // state의 값을 가져온 정보 값들로 바꿔ㅏ주자.\r\n            this.setState({\r\n                nowPlaying,\r\n                upComing,\r\n                popular\r\n            })\r\n\r\n        } catch {\r\n            this.setState({\r\n                error: \"Can't find Movie information.\"\r\n            })\r\n        } finally {\r\n            // error가 되든 안되든 loading은 false가 되어\r\n            // error나 movie를 보여준다.\r\n            this.setState({\r\n                loading: false\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { nowPlaying, upComing, popular, error, loading } = this.state;\r\n        console.log(this.state);\r\n        return <HomePresenter\r\n            nowPlaying={nowPlaying}\r\n            upComing={upComing}\r\n            popular={popular}\r\n            error={error}\r\n            loading={loading} />\r\n    }\r\n\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n    padding:20px;\r\n`;\r\n\r\nconst TVPresenter = ({ topRated, popular, airingToday, loading, error }) => (\r\n    <>\r\n        <Helmet><title>TV Shows | Beomflix</title></Helmet>\r\n        {loading ? (<Loader />) :\r\n            <Container>\r\n                {/* <Helmet><title>TV Shows | Beomflix</title></Helmet> */}\r\n                {topRated && topRated.length > 0 && (\r\n                    <Section title=\"Top Rated TV Shows\">\r\n                        {topRated.map(show => (\r\n                            <Poster\r\n                                key={show.id}\r\n                                id={show.id}\r\n                                title={show.original_name}\r\n                                imageUrl={show.poster_path}\r\n                                rating={show.vote_average}\r\n                                year={show.first_air_date && show.first_air_date.substring(0, 4)}\r\n                                isMovie={false}\r\n\r\n                            />))}\r\n                    </Section>\r\n                )}\r\n                {popular && popular.length > 0 && (\r\n                    <Section title=\"Popular TV Shows\">\r\n                        {popular.map(show => (\r\n                            <Poster\r\n                                key={show.id}\r\n                                id={show.id}\r\n                                title={show.original_name}\r\n                                imageUrl={show.poster_path}\r\n                                rating={show.vote_average}\r\n                                year={show.first_air_date && show.first_air_date.substring(0, 4)}\r\n                                isMovie={false}\r\n\r\n                            />))}\r\n                    </Section>\r\n                )}\r\n                {airingToday && airingToday.length > 0 && (\r\n                    <Section title=\"Airing Today TV Shows\">\r\n                        {airingToday.map(show => (\r\n                            <Poster\r\n                                key={show.id}\r\n                                id={show.id}\r\n                                title={show.original_name}\r\n                                imageUrl={show.poster_path}\r\n                                rating={show.vote_average}\r\n                                year={show.first_air_date && show.first_air_date.substring(0, 4)}\r\n                                isMovie={false}\r\n\r\n                            />))}\r\n                    </Section>\r\n                )}\r\n                {error && <Message color=\"#e74c3c\" text={error} />}\r\n            </Container>}\r\n    </>\r\n);\r\nTVPresenter.propTypes = {\r\n    topRated: PropTypes.array,\r\n    popular: PropTypes.array,\r\n    airingToday: PropTypes.array,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\n\r\nexport default TVPresenter;","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;","import React from \"react\";\r\nimport TVPresenter from \"./TVPresenter\";\r\nimport { tvApi } from \"API\";\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        topRated: null,\r\n        popular: null,\r\n        airingToday: null,\r\n        loading: true,\r\n        error: null\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            // API 의 NOWPLAYING 함수로 지금 상영중인 영화 정보를 가져온다\r\n            // 정보들 중에 DATA의 RESULT 값만 가져오기 위해서 객체 비구조화 를 이용\r\n            // result 변수의 이름을 nowPlaying,upComing, popular으로 바꿔주는 방법 (ES6 매직)\r\n            const { data: { results: topRated } } = await tvApi.topRated();\r\n            const { data: { results: popular } } = await tvApi.popular();\r\n            const { data: { results: airingToday } } = await tvApi.airingToday();\r\n\r\n            // state의 값을 가져온 정보 값들로 바꿔ㅏ주자.\r\n            this.setState({\r\n                topRated,\r\n                popular,\r\n                airingToday\r\n            })\r\n\r\n        } catch {\r\n            this.setState({\r\n                error: \"Can't find TV information.\"\r\n            })\r\n        } finally {\r\n            // error가 되든 안되든 loading은 false가 되어\r\n            // error나 movie를 보여준다.\r\n            this.setState({\r\n                loading: false\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        const { topRated, popular, airingToday, loading, error } = this.state;\r\n        console.log(this.state);\r\n        return <TVPresenter\r\n            topRated={topRated}\r\n            popular={popular}\r\n            airingToday={airingToday}\r\n            loading={loading}\r\n            error={error} />\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\nimport Section from \"Components/Section\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n    padding:0 20px;\r\n\r\n`;\r\n\r\nconst Form = styled.form`\r\n    margin-bottom:20px;\r\n    width:100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    all :unset;\r\n    font-size:28px;\r\n    width:100%;\r\n`;\r\n\r\n\r\n\r\nconst SearchPresenter = ({ movieResults, tvResults, loading, error, searchTerm, handleSubmit, updateTerm }) =>\r\n    <Container>\r\n        <Helmet><title>Search | Beomflix</title></Helmet>\r\n        <Form onSubmit={handleSubmit}>\r\n            <Input placeholder=\"Search Movies or Tv shows...\" value={searchTerm} onChange={updateTerm}></Input>\r\n        </Form>\r\n        {loading ? <Loader /> : <>\r\n            {movieResults && movieResults.length > 0 && (\r\n                <Section title=\"Movie Results\">\r\n                    {movieResults.map(movie => (\r\n                        <Poster\r\n                            key={movie.id}\r\n                            id={movie.id}\r\n                            title={movie.original_title}\r\n                            imageUrl={movie.poster_path}\r\n                            rating={movie.vote_average}\r\n                            year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                            isMovie={true}\r\n\r\n                        />))}\r\n                </Section>)}\r\n            {tvResults && tvResults.length > 0 && (\r\n                <Section title=\"TV Results\">\r\n                    {tvResults.map(show => (\r\n                        <span key={show.id}>{show.name}</span>\r\n                    ))}\r\n                </Section>)}\r\n        </>}\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n        {tvResults && movieResults && tvResults.length === 0 && movieResults.length === 0 && (\r\n            <Message text={`Nothing found for : ${searchTerm}`} color=\"#95a5a6\" />)}\r\n    </Container>\r\n\r\nSearchPresenter.propTypes = {\r\n    movieResults: PropTypes.array,\r\n    tvResults: PropTypes.array,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string,\r\n    searchTerm: PropTypes.string,\r\n    handleSubmit: PropTypes.func.isRequired,\r\n    updateTerm: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default SearchPresenter;","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;","import { MovieApi } from \"API\";\r\nimport { tvApi } from \"API\";\r\nimport React from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        movieResults: null, // 검색한 영화 \r\n        tvResults: null, // 검색한 tv 프로그램\r\n        searchTerm: \"\", // 사용자가 단어를 가지고 검색\r\n        loading: false,\r\n        error: null\r\n    }\r\n    componentDidMount() {\r\n        this.handleSubmit();\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        if (event) {\r\n            event.preventDefault();\r\n        }\r\n        const { searchTerm } = this.state;\r\n        if (searchTerm !== \"\") {\r\n            this.searchByTerm();\r\n        }\r\n    }\r\n    // 검색 내용 바뀔때\r\n    updateTerm = (event) => {\r\n        const { target: { value } } = event;\r\n        console.log(value);\r\n        this.setState({\r\n            searchTerm: value\r\n        })\r\n    }\r\n    searchByTerm = async () => {\r\n        const { searchTerm } = this.state;\r\n        this.setState({ loading: true });\r\n        try {\r\n\r\n            const { data: { results: movieResults } } = await MovieApi.search(searchTerm);\r\n            const { data: { results: tvResults } } = await tvApi.search(searchTerm);\r\n\r\n            this.setState({\r\n                movieResults,\r\n                tvResults\r\n            })\r\n        } catch {\r\n            this.setState({ error: \"Can't find results\" });\r\n        } finally {\r\n            this.setState({ loading: false });\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        const { movieResults, tvResults, searchTerm, loading, error } = this.state;\r\n        return <SearchPresenter\r\n            movieResults={movieResults}\r\n            tvResults={tvResults}\r\n            searchTerm={searchTerm}\r\n            loading={loading}\r\n            error={error}\r\n            handleSubmit={this.handleSubmit}\r\n            updateTerm={this.updateTerm} />\r\n    }\r\n}","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\"\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n    color:white;\r\n    position:fixed;\r\n    top:0;\r\n    left:0;\r\n    width:100%;\r\n    height:50px;\r\n    display:flex;\r\n    align-items:center;\r\n    padding:0 10px;\r\n    background-color:rgba(20,20,20,0.8);\r\n    box-shadow:0px 1px 5px 2px rgba(0,0,0,0.8);\r\n`;\r\nconst List = styled.ul`\r\n    display:flex;\r\n`;\r\nconst Item = styled.li`\r\n    width:80px;\r\n    height:50px;\r\n    text-align:center;\r\n    border-bottom: 5px solid ${props => props.current ? \"#3498db\" : \"transparent\"};\r\n    transition:border-bottom 0.5s ease-in-out;\r\n`;\r\nconst SLink = styled(Link)`\r\n    height:50px;\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:center;\r\n`;\r\n\r\n\r\nexport default withRouter(({ location: { pathname } }) => (\r\n    <Header>\r\n\r\n        <List>\r\n            <Item current={pathname === \"/\"}>\r\n                <SLink to=\"/\">Movies</SLink>\r\n            </Item>\r\n            <Item current={pathname === \"/tv\"}>\r\n                <SLink to=\"/tv\">TV</SLink>\r\n            </Item>\r\n            <Item current={pathname === \"/search\"}>\r\n                <SLink to=\"/search\">Search</SLink>\r\n            </Item>\r\n        </List>\r\n    </Header>\r\n));","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\nimport Message from \"Components/Message\";\r\n\r\nconst Container = styled.div`\r\n    height:calc(100vh - 50px);\r\n    width:100%;\r\n    position:relative;\r\n    padding:50px;\r\n`;\r\nconst Content = styled.div`\r\n    display:flex;\r\n    width:100%;\r\n    position:relative;\r\n    z-index:1;\r\n    height:100%;\r\n`;\r\n\r\n\r\n\r\nconst Cover = styled.div`\r\n    width:30%;\r\n    background-image:url(${props => props.bgImage});\r\n    background-position:center center;\r\n    background-size:cover;\r\n    height:100%;\r\n`;\r\nconst Backdrop = styled.div`\r\n    position:absolute;\r\n    top:0;\r\n    left:0;\r\n    width:100%;\r\n    height:100%;\r\n    background-image:url(${props => props.bgImage});\r\n    background-position:center center;\r\n    background-size:cover;\r\n    filter:blur(3px);\r\n    opacity:0.5;\r\n    z-index:0;\r\n`;\r\n\r\nconst Data = styled.div`\r\n    width :70%;\r\n    margin-left: 20px;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n    font-size:32px;\r\n    /* margin-bottom:20px; */\r\n`;\r\nconst ItemContainer = styled.div`\r\n    margin:20px 0;\r\n`;\r\nconst Item = styled.span``;\r\nconst Divider = styled.span`\r\n    margin:0 10px;\r\n`;\r\nconst Overview = styled.p`\r\n    font-size:12px;\r\n    opacity:0.7;\r\n    line-height:2;\r\n    width:50%;\r\n    \r\n`;\r\n\r\nconst DetailPresenter = ({ result, loading, error }) =>\r\n    loading ? (\r\n        <>\r\n            <Helmet><title>Loading | Beomflix</title></Helmet>\r\n            <Loader />\r\n        </>\r\n    ) : (\r\n        error ? <Message /> :\r\n            <Container>\r\n                <Helmet><title>{result.original_title ? result.original_title : result.original_name} | Beomflix</title></Helmet>\r\n                <Backdrop\r\n                    bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`}\r\n                />\r\n                <Content>\r\n                    <Cover bgImage={result.poster_path ? `https://image.tmdb.org/t/p/original${result.poster_path}` : require(\"../../assets/noPosterSmall.PNG\")} />\r\n                    <Data>\r\n                        <Title>{result.original_title ? result.original_title : result.original_name}</Title>\r\n                        <ItemContainer>\r\n                            <Item>{result.release_date ? result.release_date.substring(0, 4) : result.first_air_date.substring(0, 4)}</Item>\r\n                            <Divider>  ·  </Divider>\r\n                            <Item>{result.runtime ? result.runtime : result.episode_run_time[0]}min</Item>\r\n                            <Divider>  ·  </Divider>\r\n                            <Item>\r\n                                {result.genres &&\r\n                                    result.genres.map((genre, index) =>\r\n                                        index === result.genres.length - 1 ? genre.name : `${genre.name} / `\r\n                                    )}\r\n                            </Item>\r\n                        </ItemContainer>\r\n                        <Overview>{result.overview}</Overview>\r\n                    </Data>\r\n                </Content>\r\n            </Container>\r\n    );\r\n\r\nDetailPresenter.propTypes = {\r\n    result: PropTypes.object,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\n\r\nexport default DetailPresenter;","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;","import { MovieApi, tvApi } from \"API\";\r\nimport React from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\n\r\nexport default class extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const { location: { pathname } } = props;\r\n        this.state = {\r\n            result: null,  // show 를 찾을 때 id를 갖고 가서 찾는다.\r\n            loading: true,\r\n            error: null,\r\n            isMovie: pathname.includes(\"/movie/\")\r\n        };\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        const { match: { params: { id } }, history: { push } } = this.props;\r\n        const { isMovie } = this.state;\r\n\r\n        const parsedId = parseInt(id);\r\n        if (isNaN(parsedId)) {\r\n            return push(\"/\")\r\n        }\r\n        let result = null;\r\n        try {\r\n            if (isMovie) {\r\n                // const request = await MovieApi.movieDetail(parsedId);\r\n                // result = request.data;\r\n                ({ data: result } = await MovieApi.movieDetail(parsedId));\r\n            } else {\r\n                // const request = await tvApi.showDetail(parsedId);\r\n                // result = request.data;\r\n                ({ data: result } = await tvApi.showDetail(parsedId));\r\n            }\r\n\r\n        } catch {\r\n            this.setState({ error: \"Can't find anything.\" })\r\n        } finally {\r\n            this.setState({\r\n                loading: false, result\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        const { result, loading, error } = this.state;\r\n        console.log(result);\r\n        return <DetailPresenter\r\n            result={result}\r\n            loading={loading}\r\n            error={error} />\r\n    }\r\n}","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Home from \"Routes/Home\";\r\nimport TV from \"Routes/TV\";\r\nimport Search from \"Routes/Search\";\r\nimport Header from \"Components/Header\";\r\nimport Detail from \"Routes/Detail\";\r\n\r\n\r\n\r\n\r\nexport default () => (\r\n    <Router>\r\n        <>\r\n            <Header />\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Home} />\r\n                <Route path=\"/tv\" exact component={TV} />\r\n                <Route path=\"/search\" component={Search} />\r\n                <Route path=\"/movie/:id\" component={Detail} />\r\n                <Route path=\"/show/:id\" component={Detail} />\r\n                <Redirect from=\"*\" to=\"/\" />\r\n            </Switch>\r\n        </>\r\n    </Router>\r\n);","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\n\r\nconst globalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a{\r\n        text-decoration:none;\r\n        color:inherit;\r\n    }\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body\r\n    {\r\n        font-family:--apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        font-size:12px;\r\n        background-color:rgba(20,20,20,1);\r\n        color:white;\r\n        padding-top:50px;\r\n    }\r\n`;\r\n\r\n\r\nexport default globalStyles;","import React, { Component } from 'react';\nimport Router from \"Components/Router\";\nimport GloblaStyles from \"Components/GlobalStyles\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Router />\n        <GloblaStyles />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport \"./API\";\n\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}